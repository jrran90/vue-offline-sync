(function(i,f){typeof exports=="object"&&typeof module<"u"?f(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],f):(i=typeof globalThis<"u"?globalThis:i||self,f(i.VueOfflineSync={},i.Vue))})(this,function(i,f){"use strict";const S="vueOfflineSync",r="syncData";let D=1,l="syncId";function O(e){l!==e&&(console.warn(`[IndexedDB] KeyPath changed from '${l}' to '${e}', resetting DB...`),l=e,D++,indexedDB.deleteDatabase(S))}function y(){return new Promise((e,t)=>{const n=indexedDB.open(S,D);n.onerror=()=>t(new Error("Failed to open IndexedDB.")),n.onsuccess=()=>e(n.result),n.onupgradeneeded=o=>{const s=o.target.result;s.objectStoreNames.contains(r)&&s.deleteObjectStore(r),s.createObjectStore(r,{keyPath:l,autoIncrement:!0})}})}async function m(e){const t=await y();return new Promise((n,o)=>{const a=t.transaction(r,"readwrite").objectStore(r);l in e||(e[l]=Date.now());const d=a.put(e);d.onsuccess=()=>n(e),d.onerror=()=>o(new Error("Failed to save data."))})}async function b(){const e=await y();return new Promise((t,n)=>{const a=e.transaction(r,"readonly").objectStore(r).getAll();a.onsuccess=()=>t(a.result),a.onerror=()=>n(new Error("Failed to retrieve data."))})}async function P(){const e=await y();return new Promise((t,n)=>{const a=e.transaction(r,"readwrite").objectStore(r).clear();a.onsuccess=()=>t(),a.onerror=()=>n(new Error("Failed to clear data."))})}async function g(e){const t=await y();return new Promise((n,o)=>{const d=t.transaction(r,"readwrite").objectStore(r).delete(e);d.onsuccess=()=>n(),d.onerror=()=>o(new Error(`Failed to remove entry with id: ${e}`))})}function v(e){const t=f.reactive({isOnline:navigator.onLine,offlineData:[]});O(e.keyPath||"id");const n=async()=>{t.offlineData=await b()},o=async()=>{if(!(!t.isOnline||t.offlineData.length===0)){try{e.bulkSync?await a():await d()}catch(c){console.error("Network error during sync:",c)}await n()}},s=async c=>{if(t.isOnline)try{const{[e.keyPath||"id"]:u,...w}=c;await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(w),headers:{"Content-Type":"application/json",...e.headers}})}catch(u){console.error("Network error while syncing:",u)}else await m(c),await n()},a=async()=>{const c=t.offlineData.map(({[e.keyPath||"id"]:w,...h})=>h),u=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json",...e.headers}});if(!u.ok){console.error(`Bulk sync failed with status: ${u.status}`);return}await P()},d=async()=>{for(const c of t.offlineData){const{[e.keyPath||"id"]:u,...w}=c,h=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(w),headers:{"Content-Type":"application/json",...e.headers}});if(!h.ok){console.error(`Sync failed with status: ${h.status}`);continue}await g(c[e.keyPath||"id"])}};return f.onMounted(async()=>{window.addEventListener("online",async()=>{t.isOnline=!0,await o()}),window.addEventListener("offline",async()=>{t.isOnline=!1}),await n()}),{state:t,saveOfflineData:s,syncOfflineData:o}}i.useOfflineSync=v,Object.defineProperty(i,Symbol.toStringTag,{value:"Module"})});
