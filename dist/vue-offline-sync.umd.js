(function(c,f){typeof exports=="object"&&typeof module<"u"?f(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],f):(c=typeof globalThis<"u"?globalThis:c||self,f(c.VueOfflineSync={},c.Vue))})(this,function(c,f){"use strict";const S="vueOfflineSync",s="syncData";let g=1,u="id";function O(e){u!==e&&(console.warn(`[IndexedDB] KeyPath changed from '${u}' to '${e}', resetting DB...`),u=e,g++,indexedDB.deleteDatabase(S))}function h(){return new Promise((e,a)=>{const n=indexedDB.open(S,g);n.onerror=()=>a(new Error("Failed to open IndexedDB.")),n.onsuccess=()=>e(n.result),n.onupgradeneeded=r=>{const i=r.target.result;i.objectStoreNames.contains(s)&&i.deleteObjectStore(s),i.createObjectStore(s,{keyPath:u,autoIncrement:!0})}})}async function p(e){const a=await h();return new Promise((n,r)=>{const o=a.transaction(s,"readwrite").objectStore(s);u in e||(e[u]=Date.now());const d=o.put(e);d.onsuccess=()=>n(e),d.onerror=()=>r(new Error("Failed to save data."))})}async function D(){const e=await h();return new Promise((a,n)=>{const o=e.transaction(s,"readonly").objectStore(s).getAll();o.onsuccess=()=>a(o.result),o.onerror=()=>n(new Error("Failed to retrieve data."))})}async function b(){const e=await h();return new Promise((a,n)=>{const o=e.transaction(s,"readwrite").objectStore(s).clear();o.onsuccess=()=>a(),o.onerror=()=>n(new Error("Failed to clear data."))})}async function P(e){const a=await h();return new Promise((n,r)=>{const d=a.transaction(s,"readwrite").objectStore(s).delete(e);d.onsuccess=()=>n(),d.onerror=()=>r(new Error(`Failed to remove entry with id: ${e}`))})}function v(e){const a=new BroadcastChannel("vue-offline-sync"),n=f.reactive({isOnline:navigator.onLine,offlineData:[],isSyncInProgress:!1});O(e.keyPath||"id");const r=async()=>{n.offlineData=await D()},i=async()=>{if(!(!n.isOnline||n.offlineData.length===0)){try{e.bulkSync?await d():await k()}catch(t){console.error("Network error during sync:",t)}a.postMessage({type:"synced"}),await r()}},o=async t=>{if(n.isOnline){n.isSyncInProgress=!0;try{const{[e.keyPath||"id"]:l,...w}=t;await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(w),headers:{"Content-Type":"application/json",...e.headers}})}catch(l){console.error("Network error while syncing:",l)}finally{n.isSyncInProgress=!1}}else{if(e.uniqueKeys&&e.uniqueKeys.length>0&&(await D()).some(y=>e.uniqueKeys.some(m=>y[m]===t[m]))){console.warn("[vue-offline-sync] Duplicate entry detected. Skipping insert: ",t);return}await p(t),await r(),a.postMessage({type:"new-data"})}},d=async()=>{const t=n.offlineData.map(({[e.keyPath||"id"]:w,...y})=>y),l=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json",...e.headers}});if(!l.ok){console.error(`Bulk sync failed with status: ${l.status}`);return}await b()},k=async()=>{for(const t of n.offlineData){const{[e.keyPath||"id"]:l,...w}=t,y=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(w),headers:{"Content-Type":"application/json",...e.headers}});if(!y.ok){console.error(`Sync failed with status: ${y.status}`);continue}await P(t[e.keyPath||"id"])}};return f.onMounted(async()=>{window.addEventListener("online",async()=>{n.isOnline=!0,n.isSyncInProgress=!0,await i(),n.isSyncInProgress=!1}),window.addEventListener("offline",async()=>{n.isOnline=!1}),a.addEventListener("message",async t=>{(t.data.type==="synced"||t.data.type==="new-data")&&(console.log("[vue-offline-sync] Sync event received from another tab, reloading offline data..."),await r())}),await r()}),{state:n,saveOfflineData:o,syncOfflineData:i}}c.useOfflineSync=v,Object.defineProperty(c,Symbol.toStringTag,{value:"Module"})});
