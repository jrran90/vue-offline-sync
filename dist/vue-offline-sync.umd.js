(function(u,w){typeof exports=="object"&&typeof module<"u"?w(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],w):(u=typeof globalThis<"u"?globalThis:u||self,w(u.VueOfflineSync={},u.Vue))})(this,function(u,w){"use strict";const v="vueOfflineSync",s="syncData";let m=1,h="id";function O(e){h!==e&&(console.warn(`[IndexedDB] KeyPath changed from '${h}' to '${e}', resetting DB...`),h=e,m++,indexedDB.deleteDatabase(v))}function g(){return new Promise((e,a)=>{const n=indexedDB.open(v,m);n.onerror=()=>a(new Error("Failed to open IndexedDB.")),n.onsuccess=()=>e(n.result),n.onupgradeneeded=o=>{const c=o.target.result;c.objectStoreNames.contains(s)&&c.deleteObjectStore(s),c.createObjectStore(s,{keyPath:h,autoIncrement:!0})}})}async function P(e){const a=await g();return new Promise((n,o)=>{const r=a.transaction(s,"readwrite").objectStore(s);h in e||(e[h]=Date.now());const y=r.put(e);y.onsuccess=()=>n(e),y.onerror=()=>o(new Error("Failed to save data."))})}async function D(){const e=await g();return new Promise((a,n)=>{const r=e.transaction(s,"readonly").objectStore(s).getAll();r.onsuccess=()=>a(r.result),r.onerror=()=>n(new Error("Failed to retrieve data."))})}async function b(){const e=await g();return new Promise((a,n)=>{const r=e.transaction(s,"readwrite").objectStore(s).clear();r.onsuccess=()=>a(),r.onerror=()=>n(new Error("Failed to clear data."))})}async function k(e){const a=await g();return new Promise((n,o)=>{const y=a.transaction(s,"readwrite").objectStore(s).delete(e);y.onsuccess=()=>n(),y.onerror=()=>o(new Error(`Failed to remove entry with id: ${e}`))})}function E(e){const a=new BroadcastChannel("vue-offline-sync"),n=w.reactive({isOnline:navigator.onLine,offlineData:[],isSyncInProgress:!1});O(e.keyPath||"id");const o=async()=>{n.offlineData=await D()},c=async(t,i=1)=>{var l;try{return await t()}catch{return i>=(((l=e.retryPolicy)==null?void 0:l.maxAttempts)||3)?(console.error("[vue-offline-sync] Max retry attempts reached."),null):(console.warn(`[vue-offline-sync] Retrying... (${i})`),await new Promise(d=>{var p;return setTimeout(d,((p=e.retryPolicy)==null?void 0:p.delayMs)||1e3)}),c(t,i+1))}},r=async()=>{if(!(!n.isOnline||n.offlineData.length===0)){try{e.bulkSync?await T():await q()}catch(t){console.error("[vue-offline-sync] Network error during sync:",t)}a.postMessage({type:"synced"}),await o()}},y=async t=>{if(n.isOnline){n.isSyncInProgress=!0;try{const{[e.keyPath||"id"]:i,...l}=t,d=await c(async()=>await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",...e.headers}}));(!d||!d.ok)&&(console.error("[vue-offline-sync] Request failed. Storing offline data.",t),await S(t))}catch(i){console.error("[vue-offline-sync] Network error while syncing:",i),await S(t)}finally{n.isSyncInProgress=!1}}else await S(t)},j=async t=>{var l;return(l=e.uniqueKeys)!=null&&l.length?(await D()).some(f=>e.uniqueKeys.some(d=>f[d]===t[d])):!1},S=async t=>{if(await j(t)){console.warn("[vue-offline-sync] Duplicate entry detected. Skipping insert: ",t);return}await P(t),await o(),a.postMessage({type:"new-data"})},T=async()=>{const t=n.offlineData.map(({[e.keyPath||"id"]:l,...f})=>f),i=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json",...e.headers}});if(!i.ok){console.error(`[vue-offline-sync] Bulk sync failed with status: ${i.status}`);return}await b()},q=async()=>{for(const t of n.offlineData){const{[e.keyPath||"id"]:i,...l}=t,f=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",...e.headers}});if(!f.ok){console.error(`[vue-offline-sync] Sync failed with status: ${f.status}`);continue}await k(t[e.keyPath||"id"])}};return w.onMounted(async()=>{console.log("[vue-offline-sync] Component mounted. Fetching offline data..."),await o(),window.addEventListener("online",async()=>{console.log("[vue-offline-sync] Device is back online. Starting sync..."),n.isOnline=!0,n.isSyncInProgress=!0,await r(),n.isSyncInProgress=!1}),window.addEventListener("offline",async()=>{console.log("[vue-offline-sync] Device is offline."),n.isOnline=!1}),a.addEventListener("message",async t=>{(t.data.type==="synced"||t.data.type==="new-data")&&(console.log("[vue-offline-sync] Sync event received from another tab, reloading offline data..."),await o())}),console.log("[vue-offline-sync] Initialization complete.")}),{state:n,saveOfflineData:y,syncOfflineData:r}}u.useOfflineSync=E,Object.defineProperty(u,Symbol.toStringTag,{value:"Module"})});
