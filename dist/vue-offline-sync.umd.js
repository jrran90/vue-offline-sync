(function(i,f){typeof exports=="object"&&typeof module<"u"?f(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],f):(i=typeof globalThis<"u"?globalThis:i||self,f(i.VueOfflineSync={},i.Vue))})(this,function(i,f){"use strict";const S="vueOfflineSync",o="syncData";let D=1,l="syncId";function O(e){l!==e&&(console.warn(`[IndexedDB] KeyPath changed from '${l}' to '${e}', resetting DB...`),l=e,D++,indexedDB.deleteDatabase(S))}function y(){return new Promise((e,n)=>{const t=indexedDB.open(S,D);t.onerror=()=>n(new Error("Failed to open IndexedDB.")),t.onsuccess=()=>e(t.result),t.onupgradeneeded=a=>{const c=a.target.result;c.objectStoreNames.contains(o)&&c.deleteObjectStore(o),c.createObjectStore(o,{keyPath:l,autoIncrement:!0})}})}async function m(e){const n=await y();return new Promise((t,a)=>{const s=n.transaction(o,"readwrite").objectStore(o);l in e||(e[l]=Date.now());const d=s.put(e);d.onsuccess=()=>t(e),d.onerror=()=>a(new Error("Failed to save data."))})}async function b(){const e=await y();return new Promise((n,t)=>{const s=e.transaction(o,"readonly").objectStore(o).getAll();s.onsuccess=()=>n(s.result),s.onerror=()=>t(new Error("Failed to retrieve data."))})}async function g(){const e=await y();return new Promise((n,t)=>{const s=e.transaction(o,"readwrite").objectStore(o).clear();s.onsuccess=()=>n(),s.onerror=()=>t(new Error("Failed to clear data."))})}async function p(e){const n=await y();return new Promise((t,a)=>{const d=n.transaction(o,"readwrite").objectStore(o).delete(e);d.onsuccess=()=>t(),d.onerror=()=>a(new Error(`Failed to remove entry with id: ${e}`))})}function v(e){const n=new BroadcastChannel("vue-offline-sync"),t=f.reactive({isOnline:navigator.onLine,offlineData:[]});O(e.keyPath||"id");const a=async()=>{t.offlineData=await b()},c=async()=>{if(!(!t.isOnline||t.offlineData.length===0)){try{e.bulkSync?await d():await P()}catch(r){console.error("Network error during sync:",r)}n.postMessage({type:"synced"}),await a()}},s=async r=>{if(t.isOnline)try{const{[e.keyPath||"id"]:u,...w}=r;await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(w),headers:{"Content-Type":"application/json",...e.headers}})}catch(u){console.error("Network error while syncing:",u)}else await m(r),await a(),n.postMessage({type:"new-data"})},d=async()=>{const r=t.offlineData.map(({[e.keyPath||"id"]:w,...h})=>h),u=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json",...e.headers}});if(!u.ok){console.error(`Bulk sync failed with status: ${u.status}`);return}await g()},P=async()=>{for(const r of t.offlineData){const{[e.keyPath||"id"]:u,...w}=r,h=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(w),headers:{"Content-Type":"application/json",...e.headers}});if(!h.ok){console.error(`Sync failed with status: ${h.status}`);continue}await p(r[e.keyPath||"id"])}};return f.onMounted(async()=>{window.addEventListener("online",async()=>{t.isOnline=!0,await c()}),window.addEventListener("offline",async()=>{t.isOnline=!1}),n.addEventListener("message",async r=>{(r.data.type==="synced"||r.data.type==="new-data")&&(console.log("[vue-offline-sync] Sync event received from another tab, reloading offline data..."),await a())}),await a()}),{state:t,saveOfflineData:s,syncOfflineData:c}}i.useOfflineSync=v,Object.defineProperty(i,Symbol.toStringTag,{value:"Module"})});
