(function(c,u){typeof exports=="object"&&typeof module<"u"?u(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],u):(c=typeof globalThis<"u"?globalThis:c||self,u(c.VueOfflineSync={},c.Vue))})(this,function(c,u){"use strict";const p="vueOfflineSync",i="syncData",S="syncId";function w(){return new Promise((e,s)=>{const t=indexedDB.open(p,1);t.onerror=()=>s(new Error("Failed to open IndexedDB.")),t.onsuccess=()=>e(t.result),t.onupgradeneeded=n=>{const o=n.target.result;o.objectStoreNames.contains(i)&&o.deleteObjectStore(i),o.createObjectStore(i,{keyPath:S,autoIncrement:!0})}})}async function D(e){const s=await w();return new Promise((t,n)=>{const r=s.transaction(i,"readwrite").objectStore(i);S in e||(e[S]=Date.now());const f=r.put(e);f.onsuccess=()=>t(e),f.onerror=()=>n(new Error("Failed to save data."))})}async function h(){const e=await w();return new Promise((s,t)=>{const r=e.transaction(i,"readonly").objectStore(i).getAll();r.onsuccess=()=>s(r.result),r.onerror=()=>t(new Error("Failed to retrieve data."))})}async function O(){const e=await w();return new Promise((s,t)=>{const r=e.transaction(i,"readwrite").objectStore(i).clear();r.onsuccess=()=>s(),r.onerror=()=>t(new Error("Failed to clear data."))})}async function m(e){const s=await w();return new Promise((t,n)=>{const f=s.transaction(i,"readwrite").objectStore(i).delete(e);f.onsuccess=()=>t(),f.onerror=()=>n(new Error(`Failed to remove entry with id: ${e}`))})}function v(e){const s="syncId",t=new BroadcastChannel("vue-offline-sync"),n=u.reactive({isOnline:navigator.onLine,offlineData:[],isSyncInProgress:!1}),o=async()=>{n.offlineData=await h()},r=async()=>{if(!(!n.isOnline||n.offlineData.length===0)){try{e.bulkSync?await b():await P()}catch(a){console.error("[vue-offline-sync] Network error during sync:",a)}t.postMessage({type:"synced"}),await o()}},f=async a=>{if(n.isOnline){n.isSyncInProgress=!0;try{const{[s]:l,...y}=a;await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(y),headers:{"Content-Type":"application/json",...e.headers}})}catch(l){console.error("[vue-offline-sync] Network error while syncing:",l)}finally{n.isSyncInProgress=!1}}else{if(e.uniqueKeys&&e.uniqueKeys.length>0&&(await h()).some(d=>e.uniqueKeys.some(g=>d[g]===a[g]))){console.warn("[vue-offline-sync] Duplicate entry detected. Skipping insert: ",a);return}await D(a),await o(),t.postMessage({type:"new-data"})}},b=async()=>{if(n.offlineData.length===0)return;const a=n.offlineData.map(({[s]:y,...d})=>d),l=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(a),headers:{"Content-Type":"application/json",...e.headers}});if(!l.ok){console.error(`[vue-offline-sync] Bulk sync failed with status: ${l.status}`);return}await O()},P=async()=>{for(const a of n.offlineData){const{[s]:l,...y}=a,d=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(y),headers:{"Content-Type":"application/json",...e.headers}});if(!d.ok){console.error(`[vue-offline-sync] Sync failed with status: ${d.status}`);continue}await m(a[s])}};return u.onMounted(async()=>{window.addEventListener("online",async()=>{n.isOnline=!0,n.isSyncInProgress=!0,await r(),n.isSyncInProgress=!1}),window.addEventListener("offline",async()=>{n.isOnline=!1}),t.addEventListener("message",async a=>{(a.data.type==="synced"||a.data.type==="new-data")&&(console.log("[vue-offline-sync] Sync event received from another tab, reloading offline data..."),await o())}),await o()}),{state:n,saveOfflineData:f,syncOfflineData:r}}c.useOfflineSync=v,Object.defineProperty(c,Symbol.toStringTag,{value:"Module"})});
