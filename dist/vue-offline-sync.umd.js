(function(c,f){typeof exports=="object"&&typeof module<"u"?module.exports=f(require("vue")):typeof define=="function"&&define.amd?define(["vue"],f):(c=typeof globalThis<"u"?globalThis:c||self,c.VueOfflineSync=f(c.Vue))})(this,function(c){"use strict";const f="vueOfflineSync",o="syncData";let S=1,l="syncId";function m(e){l!==e&&(console.warn(`[IndexedDB] KeyPath changed from '${l}' to '${e}', resetting DB...`),l=e,S++,indexedDB.deleteDatabase(f))}function y(){return new Promise((e,t)=>{const n=indexedDB.open(f,S);n.onerror=()=>t(new Error("Failed to open IndexedDB.")),n.onsuccess=()=>e(n.result),n.onupgradeneeded=r=>{const s=r.target.result;s.objectStoreNames.contains(o)&&s.deleteObjectStore(o),s.createObjectStore(o,{keyPath:l,autoIncrement:!0})}})}async function D(e){const t=await y();return new Promise((n,r)=>{const a=t.transaction(o,"readwrite").objectStore(o);l in e||(e[l]=Date.now());const d=a.put(e);d.onsuccess=()=>n(e),d.onerror=()=>r(new Error("Failed to save data."))})}async function O(){const e=await y();return new Promise((t,n)=>{const a=e.transaction(o,"readonly").objectStore(o).getAll();a.onsuccess=()=>t(a.result),a.onerror=()=>n(new Error("Failed to retrieve data."))})}async function b(){const e=await y();return new Promise((t,n)=>{const a=e.transaction(o,"readwrite").objectStore(o).clear();a.onsuccess=()=>t(),a.onerror=()=>n(new Error("Failed to clear data."))})}async function g(e){const t=await y();return new Promise((n,r)=>{const d=t.transaction(o,"readwrite").objectStore(o).delete(e);d.onsuccess=()=>n(),d.onerror=()=>r(new Error(`Failed to remove entry with id: ${e}`))})}return c.defineComponent({name:"VueOfflineSync",props:{url:{type:String,required:!0},method:{type:String,default:"POST"},headers:{type:Object,default:()=>({})},keyPath:{type:String,default:"id"},bulkSync:{type:Boolean,default:!1}},setup(e){m(e.keyPath);const t=c.reactive({isOnline:navigator.onLine,offlineData:[]}),n=async()=>{t.offlineData=await O()},r=async()=>{if(!(!t.isOnline||t.offlineData.length===0)){try{e.bulkSync?await a():await d()}catch(i){console.error("Network error during sync:",i)}await n()}},s=async i=>{if(t.isOnline)try{const{[e.keyPath]:u,...w}=i;await fetch(e.url,{method:e.method,body:JSON.stringify(w),headers:{"Content-Type":"application/json",...e.headers}})}catch(u){console.error("Network error while syncing:",u)}else await D(i),await n()},a=async()=>{const i=t.offlineData.map(({[e.keyPath]:w,...h})=>h),u=await fetch(e.url,{method:e.method,body:JSON.stringify(i),headers:{"Content-Type":"application/json",...e.headers}});if(!u.ok){console.error(`Bulk sync failed with status: ${u.status}`);return}await b()},d=async()=>{for(const i of t.offlineData){const{[e.keyPath]:u,...w}=i,h=await fetch(e.url,{method:e.method,body:JSON.stringify(w),headers:{"Content-Type":"application/json",...e.headers}});if(!h.ok){console.error(`Sync failed with status: ${h.status}`);continue}await g(i[e.keyPath])}};return c.onMounted(async()=>{window.addEventListener("online",async()=>{t.isOnline=!0,await r()}),window.addEventListener("offline",async()=>{t.isOnline=!1}),await n()}),{state:t,saveOfflineData:s,syncOfflineData:r}}})});
