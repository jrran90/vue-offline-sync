(function(y,w){typeof exports=="object"&&typeof module<"u"?w(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],w):(y=typeof globalThis<"u"?globalThis:y||self,w(y.VueOfflineSync={},y.Vue))})(this,function(y,w){"use strict";const p="vueOfflineSync",i="syncData",S="syncId";function h(){return new Promise((e,s)=>{const o=indexedDB.open(p,1);o.onerror=()=>s(new Error("Failed to open IndexedDB.")),o.onsuccess=()=>e(o.result),o.onupgradeneeded=t=>{const r=t.target.result;r.objectStoreNames.contains(i)&&r.deleteObjectStore(i),r.createObjectStore(i,{keyPath:S,autoIncrement:!0})}})}async function D(e){const s=await h();return new Promise((o,t)=>{const a=s.transaction(i,"readwrite").objectStore(i);S in e||(e[S]=Date.now());const f=a.put(e);f.onsuccess=()=>o(e),f.onerror=()=>t(new Error("Failed to save data."))})}async function v(){const e=await h();return new Promise((s,o)=>{const a=e.transaction(i,"readonly").objectStore(i).getAll();a.onsuccess=()=>s(a.result),a.onerror=()=>o(new Error("Failed to retrieve data."))})}async function O(){const e=await h();return new Promise((s,o)=>{const a=e.transaction(i,"readwrite").objectStore(i).clear();a.onsuccess=()=>s(),a.onerror=()=>o(new Error("Failed to clear data."))})}async function b(e){const s=await h();return new Promise((o,t)=>{const f=s.transaction(i,"readwrite").objectStore(i).delete(e);f.onsuccess=()=>o(),f.onerror=()=>t(new Error(`Failed to remove entry with id: ${e}`))})}function P(e){const s="syncId",o=new BroadcastChannel("vue-offline-sync"),t=w.reactive({isOnline:navigator.onLine,offlineData:[],isSyncInProgress:!1}),r=async()=>{t.offlineData=await v()},a=async(n,c=1)=>{var l;try{return await n()}catch{return c>=(((l=e.retryPolicy)==null?void 0:l.maxAttempts)||1)?(console.error("[vue-offline-sync] Max retry attempts reached."),null):(console.warn(`[vue-offline-sync] Retrying... (${c})`),await new Promise(d=>{var m;return setTimeout(d,((m=e.retryPolicy)==null?void 0:m.delayMs)||1e3)}),a(n,c+1))}},f=async()=>{if(!(!t.isOnline||t.offlineData.length===0)){try{e.bulkSync?await j():await T()}catch(n){console.error("[vue-offline-sync] Network error during sync:",n)}o.postMessage({type:"synced"}),await r()}},E=async n=>{if(t.isOnline){t.isSyncInProgress=!0;try{const{[s]:c,...l}=n,d=await a(async()=>await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",...e.headers}}));(!d||!d.ok)&&(console.error("[vue-offline-sync] Request failed. Storing offline data.",n),await g(n))}catch(c){console.error("[vue-offline-sync] Network error while syncing:",c),await g(n)}finally{t.isSyncInProgress=!1}}else await g(n)},I=async n=>{var l;return(l=e.uniqueKeys)!=null&&l.length?(await v()).some(u=>e.uniqueKeys.some(d=>u[d]===n[d])):!1},g=async n=>{if(await I(n)){console.warn("[vue-offline-sync] Duplicate entry detected. Skipping insert: ",n);return}await D(n),await r(),o.postMessage({type:"new-data"})},j=async()=>{if(t.offlineData.length===0)return;const n=t.offlineData.map(({[s]:l,...u})=>u),c=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json",...e.headers}});if(!c.ok){console.error(`[vue-offline-sync] Bulk sync failed with status: ${c.status}`);return}await O()},T=async()=>{for(const n of t.offlineData){const{[s]:c,...l}=n,u=await fetch(e.url,{method:e.method||"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json",...e.headers}});if(!u.ok){console.error(`[vue-offline-sync] Sync failed with status: ${u.status}`);continue}await b(n[s])}};return w.onMounted(async()=>{console.log("[vue-offline-sync] Component mounted. Fetching offline data..."),await r(),window.addEventListener("online",async()=>{console.log("[vue-offline-sync] Device is back online. Starting sync..."),t.isOnline=!0,t.isSyncInProgress=!0,await f(),t.isSyncInProgress=!1}),window.addEventListener("offline",async()=>{console.log("[vue-offline-sync] Device is offline."),t.isOnline=!1}),o.addEventListener("message",async n=>{(n.data.type==="synced"||n.data.type==="new-data")&&(console.log("[vue-offline-sync] Sync event received from another tab, reloading offline data..."),await r())}),console.log("[vue-offline-sync] Initialization complete.")}),{state:t,saveOfflineData:E,syncOfflineData:f}}y.useOfflineSync=P,Object.defineProperty(y,Symbol.toStringTag,{value:"Module"})});
